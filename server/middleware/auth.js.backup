require('dotenv').config({ path: './config/.env' });
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');

// 환경변수 설정
const JWT_SECRET = process.env.JWT_SECRET || 'semonara-secret-2025';
const GMAIL_USER = process.env.EMAIL_USER;
const GMAIL_PASS = process.env.EMAIL_APP_PASSWORD;
const AUTHORIZED_EMAIL = process.env.EMAIL_TO;

// Gmail 설정
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: GMAIL_USER,
        pass: GMAIL_PASS
    }
});

// 인증 코드 저장소 (메모리)
const emailCodes = new Map();

/**
 * 6자리 인증 코드 생성
 */
function generateCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

/**
 * 단순 이메일 발송
 */
async function sendEmailCode(email, code) {
    const mailOptions = {
        from: GMAIL_USER,
        to: email,
        subject: 'Semonara 인증 코드',
        text: `인증 코드: ${code}`
    };

    await transporter.sendMail(mailOptions);
    console.log(`[AUTH] 인증 코드 발송: ${email}`);
}

/**
 * JWT 토큰 생성 (30분 유효)
 */
function generateToken(email) {
    return jwt.sign(
        { email, iat: Math.floor(Date.now() / 1000) },
        JWT_SECRET,
        { expiresIn: '30m' }
    );
}

/**
 * JWT 토큰 검증
 */
function verifyToken(token) {
    try {
        return jwt.verify(token, JWT_SECRET);
    } catch (error) {
        return null;
    }
}

/**
 * 인증 코드 요청 API
 */
async function requestEmailCode(req, res) {
    try {
        const { email } = req.body;

        if (!email || email !== AUTHORIZED_EMAIL) {
            return res.status(403).json({
                success: false,
                message: '허가되지 않은 이메일입니다.'
            });
        }

        // 기존 코드 정리
        if (emailCodes.has(email)) {
            clearTimeout(emailCodes.get(email).timeout);
        }

        // 새 코드 생성
        const code = generateCode();
        const timeout = setTimeout(() => {
            emailCodes.delete(email);
        }, 5 * 60 * 1000); // 5분

        emailCodes.set(email, {
            code,
            timeout,
            attempts: 0
        });

        // 이메일 발송
        await sendEmailCode(email, code);

        res.json({
            success: true,
            message: '인증 코드가 전송되었습니다.'
        });

    } catch (error) {
        console.error('[AUTH] 코드 발송 실패:', error);
        res.status(500).json({
            success: false,
            message: '코드 발송에 실패했습니다.'
        });
    }
}

/**
 * 인증 코드 검증 API
 */
async function verifyEmailCode(req, res) {
    try {
        const { email, code } = req.body;

        if (!email || email !== AUTHORIZED_EMAIL) {
            return res.status(403).json({
                success: false,
                message: '허가되지 않은 이메일입니다.'
            });
        }

        const storedData = emailCodes.get(email);
        if (!storedData) {
            return res.status(400).json({
                success: false,
                message: '인증 코드가 없거나 만료되었습니다.'
            });
        }

        // 시도 횟수 확인
        if (storedData.attempts >= 5) {
            emailCodes.delete(email);
            clearTimeout(storedData.timeout);
            return res.status(429).json({
                success: false,
                message: '시도 횟수 초과. 새 코드를 요청하세요.'
            });
        }

        // 코드 검증
        if (code !== storedData.code) {
            storedData.attempts++;
            return res.status(400).json({
                success: false,
                message: `잘못된 코드입니다. (${5 - storedData.attempts}회 남음)`
            });
        }

        // 인증 성공
        emailCodes.delete(email);
        clearTimeout(storedData.timeout);

        const token = generateToken(email);

        res.json({
            success: true,
            message: '인증 완료',
            token
        });

        console.log(`[AUTH] 로그인 성공: ${email}`);

    } catch (error) {
        console.error('[AUTH] 인증 실패:', error);
        res.status(500).json({
            success: false,
            message: '인증 처리 실패'
        });
    }
}

/**
 * 토큰 인증 미들웨어 (중요!)
 */
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
        return res.status(401).json({
            success: false,
            message: '토큰이 필요합니다.'
        });
    }

    const decoded = verifyToken(token);
    if (!decoded) {
        return res.status(403).json({
            success: false,
            message: '유효하지 않은 토큰입니다.'
        });
    }

    if (decoded.email !== AUTHORIZED_EMAIL) {
        return res.status(403).json({
            success: false,
            message: '접근 권한이 없습니다.'
        });
    }

    req.user = decoded;
    next();
}

/**
 * 인증 상태 확인 API
 */
function checkAuthStatus(req, res) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.json({ authenticated: false });
    }

    const decoded = verifyToken(token);
    if (!decoded) {
        return res.json({ authenticated: false });
    }

    res.json({
        authenticated: true,
        email: decoded.email,
        expiresAt: decoded.exp * 1000
    });
}

/**
 * 로그아웃 API
 */
function logout(req, res) {
    res.json({
        success: true,
        message: '로그아웃 완료'
    });
}

module.exports = {
    requestEmailCode,
    verifyEmailCode,
    authenticateToken,
    checkAuthStatus,
    logout
};
